{"version":3,"sources":["Component/CardList.js","Component/Searchbox.js","Component/Scroll.js","Component/ErrorBoundary.js","Container/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","Searchbox","searchChange","className","placeholder","type","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filterRobot","filter","name","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+LAyBeA,EAtBC,SAAC,GAAY,EAAXC,OAEhB,MAAMC,MAAM,WCSCC,EAZG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACnB,OACC,yBAAKC,UAAU,WACd,2BACCA,UAAU,mCACVC,YAAY,YACZC,KAAK,SACLC,SAAWJ,MCCAK,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,UAC/DJ,EAAMK,WCgBKC,E,kDAlBd,WAAYN,GAAO,IAAD,8BACjB,gBACKO,MAAM,CACVC,UAAS,GAHO,E,8DAMAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACN,4CAEDG,KAAKX,MAAMK,a,GAfQQ,aCsDbC,E,kDA/Cd,aAAc,IAAD,8BACZ,gBAoBDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SApBzC,EAAKZ,MAAQ,CACZhB,OAAO,GACP0B,YAAY,IAJD,E,gEAWO,IAAD,OAClBG,MAAM,8CACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKZ,SAAS,CAACrB,OAAOiC,S,+BAUhB,IAAD,OAGDC,EAAcd,KAAKJ,MAAMhB,OAAOmC,QAAO,SAAAnC,GAC5C,OAAOA,EAAOoC,KAAKC,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAElE,OACC,yBAAKjC,UAAU,MACd,2CAEA,kBAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUxB,OAAQkC,W,GAzCNZ,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.1e607938.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({robots}) =>{\r\n\tif(true){\r\n\t\tthrow Error(\"NOOOO!\");\r\n\t}\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\t\t\treturn (<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={user.id} \r\n\t\t\t\t\t\t\tname={user.name} \r\n\t\t\t\t\t\t\temail={user.email} \r\n\t\t\t\t\t\t\t/>);\r\n\r\n\t\t\t\t\t})\t\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst Searchbox = ({searchChange})=>{\r\n\treturn(\r\n\t\t<div className=\"pa3 ma3\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"pa3 ba b- -geen bg-lightest-blue\"\r\n\t\t\t\tplaceholder=\"add robot\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tonChange= {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default Searchbox;","import React from \"react\";\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style={{overflow:\"scroll\", border:\"5px solid black\", height:\"500px\"}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\t\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Sorry bitch.</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component }  from \"react\";\r\nimport CardList from \"../Component/CardList.js\";\r\n//import {robots} from \"./robots\";\r\nimport Searchbox from \"../Component/Searchbox.js\"\r\nimport Scroll from \"../Component/Scroll.js\";\r\nimport ErrorBoundary from \"../Component/ErrorBoundary.js\"\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchField:\"\"\r\n\t\t}\r\n\t\t\r\n\r\n\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t\t.then(response=>{\r\n\t\t\t\treturn response.json();\r\n\t\t\t})\r\n\t\t\t.then(users=>{\r\n\t\t\t\tthis.setState({robots:users})\r\n\t\t\t});\r\n\t}\r\n\r\n\tonSearchChange = (event) =>{\r\n\t\tthis.setState({searchField: event.target.value});\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\t\t//console.log(\"robots render \", robots );\r\n\t\r\n\t\tconst filterRobot = this.state.robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n\t\t});\r\n\t\treturn(\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1>RoboFriends</h1>\r\n\r\n\t\t\t\t<Searchbox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filterRobot}/>\r\n\t\t\t\t\t</ErrorBoundary>\t\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n//import {robots} from \"./robots\";\n\n\nReactDOM.render(\n\t<App/>\n\t,document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}