{"version":3,"sources":["Component/Card.js","Component/CardList.js","Component/Searchbox.js","Component/Scroll.js","Container/App.js","actions.js","constant.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","id","name","email","className","alt","src","CardList","robots","map","user","i","key","Searchbox","searchChange","placeholder","type","onChange","Scroll","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","filterRobot","filter","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","isPending","error","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","err","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.62dccbc2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  const { id, name, email } = props;\r\n  return (\r\n    <div className=\"bg-light-green dib br pa3 ma2 grow bw shadow-5\">\r\n      <img alt=\"x\" src={`https://robohash.org/${id}?200x200`} />\r\n      <div>\r\n        <h2>{name} </h2>\r\n        <p>{email} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card key={i} id={user.id} name={user.name} email={user.email} />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst Searchbox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa3 ma3\">\r\n      <input\r\n        className=\"pa3 ba b- -geen bg-lightest-blue\"\r\n        placeholder=\"add robot\"\r\n        type=\"search\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Searchbox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{ overflow: \"scroll\", border: \"5px solid black\", height: \"500px\" }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../Component/CardList\";\r\nimport Searchbox from \"../Component/Searchbox\";\r\nimport Scroll from \"../Component/Scroll\";\r\nimport { setSearchField, requestRobots } from \"../actions.js\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    //console.log(\"robots render \", robots );\r\n    const { searchField, onSearchChange, robots } = this.props;\r\n    //const {robots}=this.state;\r\n    const filterRobot = robots.filter((robots) => {\r\n      return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1>RoboFriends</h1>\r\n\r\n        <Searchbox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <CardList robots={filterRobot} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constant.js\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((users) => {\r\n      return dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users });\r\n    })\r\n    .catch((err) => {\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err });\r\n    });\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import{\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\r\n} from './constant.js'\r\n\r\nconst initialStateSearch={\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action={})=>{\r\n\tswitch(action.type){\r\n\tcase CHANGE_SEARCH_FIELD:\r\n\t\treturn Object.assign({}, state, {searchField: action.payload} )\r\n\t\r\n\tdefault:\r\n\t\treturn state;\r\n\t}\t\r\n\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots:[],\r\n\terror: ''\r\n\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending:true})\r\n\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {isPending:false, robots:action.payload})\r\n\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({},state, {isPending: false, error: action.payload})\r\n\r\n\tdefault:\r\n\t\treturn state;\t\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport './index.css';\r\nimport App from './Container/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots , requestRobots} from './reducers.js'\r\nimport { createLogger  } from 'redux-logger'\r\nimport \"tachyons\";\r\nimport thunkMiddleware from 'redux-thunk';\r\n//import {robots} from \"./robots\";\r\n\r\nconst logger = createLogger(); \r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\n\r\nconst store= createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t<App/>\r\n\t</Provider>\r\n\t,document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}